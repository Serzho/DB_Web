import unittest
from commands_handler import CommandsHandler


class TestCommandsHandler(unittest.TestCase):

    def test_user_input(self):
        commands_handler = CommandsHandler()
        self.assertRaises(Exception, commands_handler.input_command("/test aaa"))
        self.assertRaises(Exception, commands_handler.input_command("/test aaaaa bbbb ccc"))
        self.assertRaises(Exception, commands_handler.input_command("/test aaa bb"))
        self.assertRaises(Exception, commands_handler.input_command(""))
        self.assertRaises(Exception, commands_handler.input_command("/auth"))
        self.assertRaises(Exception, commands_handler.input_command("/auth a"))
        self.assertRaises(Exception, commands_handler.input_command("/auth a b b b "))
        self.assertRaises(Exception, commands_handler.input_command("/auth ccccc c ccc c c 22"))
        self.assertRaises(Exception, commands_handler.input_command("/get_users 1"))
        self.assertRaises(Exception, commands_handler.input_command("/get_users"))
        self.assertRaises(Exception, commands_handler.input_command("/add_user"))
        self.assertRaises(Exception, commands_handler.input_command("/add_user a a a a"))
        self.assertRaises(Exception, commands_handler.input_command("/delete_user 2"))
        self.assertRaises(Exception, commands_handler.input_command("/delay 1"))
        self.assertRaises(Exception, commands_handler.input_command("/delay"))
        self.assertRaises(Exception, commands_handler.input_command("/select_data SELECT * FROM Data"))
        self.assertRaises(Exception, commands_handler.input_command("/remove_data 0"))
        self.assertRaises(Exception, commands_handler.input_command("/remove_data -1"))
        self.assertRaises(Exception, commands_handler.input_command("/add_data 1 1"))
        self.assertRaises(Exception, commands_handler.input_command("/add_data 2 2 "))
        self.assertRaises(Exception, commands_handler.input_command("/add_data 3 3 3"))
        self.assertRaises(Exception, commands_handler.input_command("/add_data HELLO WORLD"))
        self.assertRaises(Exception, commands_handler.input_command("/auth admin 1"))
        self.assertRaises(Exception, commands_handler.input_command("/add_user ne_admin 1 False"))
        self.assertRaises(Exception, commands_handler.input_command("/select_data SELECT * FROM Data"))
        self.assertRaises(Exception, commands_handler.input_command("/select_data SELECT * FROM User"))
        self.assertRaises(Exception, commands_handler.input_command("/remove_data 1000"))
        self.assertRaises(Exception, commands_handler.input_command("/remove_data dddd"))
        self.assertRaises(Exception, commands_handler.input_command("/auth ne_admin 1"))
        self.assertRaises(Exception, commands_handler.input_command("/get_users"))
        self.assertRaises(Exception, commands_handler.input_command("/add_user admin 2 True"))
        self.assertRaises(Exception, commands_handler.input_command("/add_user admin 2 False"))
        self.assertRaises(Exception, commands_handler.input_command("/select_data"))
        self.assertRaises(Exception, commands_handler.input_command("/add_data gay ne_gay"))
        self.assertRaises(Exception, commands_handler.input_command("/remove_data 1"))
        self.assertRaises(Exception, commands_handler.input_command("/auth admin 1"))
        self.assertRaises(Exception, commands_handler.input_command("/delete_user a"))
